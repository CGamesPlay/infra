#!/usr/bin/env bash
# @describe Set up a local cluster with Lima

set -eu

# @cmd Initialize a new environment
# @flag --validate-args-only  Don't do anything other than validate arguments
# @meta require-tools limactl,kubectl,age-keygen
init() {
	env_name=${1:?Environment name is required}
	if [ -n "$(limactl disk list --json "$env_name" 2>/dev/null)" ]; then
		echo "limactl: disk $env_name already exists" >&2
		exit 1
	fi
	if limactl list "$env_name" >/dev/null 2>&1; then
		echo "limactl: machine $env_name already exists" >&2
		exit 1
	fi

	[ ${argc_validate_args_only+1} ] && exit 0

	limactl disk create "$env_name" --format raw --size $(( 5 * 1024 * 1024 * 1024 ))
	limactl create \
		--name="$env_name" \
		--disk=20 \
		--yes \
		template://k3s \
		--set '.timezone = "UTC" | .additionalDisks += [{"name": "'"$env_name"'", "format": false}]'
	limactl start "$env_name"

	limactl shell "$env_name" sudo sh -c 'apt update && apt install age'
	cat ../../driver/bootstrap.sh | limactl shell "$env_name" sudo DISK_PASSWORD="${DISK_PASSWORD:?}" BLOCK_DEVICE=/dev/vdb sh
	cp "$HOME/.lima/$env_name/copied-from-guest/kubeconfig.yaml" kubeconfig.yml
	limactl shell "$env_name" cat /tmp/sops-age-recipient.txt > sops-age-recipient.txt
}

# @cmd Delete the cluster
destroy() {
	env_name=${1:?Environment name is required}
	if limactl list "$env_name" >/dev/null 2>&1; then
		limactl delete --force "$env_name"
	fi
	if [ -n "$(limactl disk list --json "$env_name" 2>/dev/null)" ]; then
		limactl disk delete "$env_name"
	fi
}

if ! command -v argc >/dev/null; then
	echo "This command requires argc. Install from https://github.com/sigoden/argc" >&2
	exit 100
fi
eval "$(argc --argc-eval "$0" "$@")"
