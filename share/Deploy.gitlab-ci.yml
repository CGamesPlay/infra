# This is a gitlab-ci configuration file that will build a Docker image and
# deploy it to the cluster.
#
# This template is from:
# https://gitlab.com/CGamesPlay/infra/-/blob/master/share/Deploy.gitlab-ci.yml

build-image:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  interruptible: true
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker buildx create --use --bootstrap
  script:
    # Images are tagged with the commit short sha, and pushes to the default
    # branch are additionally tagged with "latest".
    - |
      tags="-t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tags="$tags -t $CI_REGISTRY_IMAGE:latest"
      fi
    # Provenance is disabled because gitlab doesn't support it. We use a
    # separate image to store the cache layers.
    - docker buildx build
      --cache-from type=registry,ref=${CI_REGISTRY_IMAGE}/cache
      --cache-to   type=registry,ref=${CI_REGISTRY_IMAGE}/cache,mode=max
      --provenance false
      $tags --push .

# To use the deploy job, create a new SecretID and store it in a protected
# variable named VAULT_SECRET_ID.
#
# To create a new SecretID:
# vault write -f auth/approle/role/deploy/secret-id
deploy:
  stage: deploy
  image: registry.gitlab.com/cgamesplay/infra/deploy:latest
  variables:
    VAULT_ROLE_ID: 133cccb6-eb2f-5674-f0fc-cb7f755384cb
  script:
    - set -euo pipefail
    - export VAULT_TOKEN=$(vault write -field=token auth/approle/login role_id="$VAULT_ROLE_ID" secret_id="$VAULT_SECRET_ID") || exit $?
    - export NOMAD_TOKEN=$(vault read -field=secret_id nomad/creds/deploy) || exit $?
    - nomad job run -var tag=$CI_COMMIT_SHORT_SHA myjob.nomad
  # Environment configuration is just for reference in gitlab, it doesn't
  # affect anything in the job itself.
  environment:
    name: production
    url: https://myjob.cluster.cgamesplay.com/
  rules:
    # Automatically deploy on pushes to the main branch.
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    # ALternatively, you can use a manual job.
    # - when: manual
